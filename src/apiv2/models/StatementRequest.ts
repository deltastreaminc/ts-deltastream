/* tslint:disable */
/* eslint-disable */
/**
 * DeltaStream REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime.ts';
import type { StatementRequestParameters } from './StatementRequestParameters.ts';
import {
  StatementRequestParametersFromJSON,
  StatementRequestParametersFromJSONTyped,
  StatementRequestParametersToJSON,
} from './StatementRequestParameters.ts';

/**
 *
 * @export
 * @interface StatementRequest
 */
export interface StatementRequest {
  /**
   * DeltaStream SQL statement or batch of SQL statements to execute
   * @type {string}
   * @memberof StatementRequest
   */
  statement: string;
  /**
   * Organization Name or ID in which the statement should be executed
   * @type {string}
   * @memberof StatementRequest
   */
  organization?: string;
  /**
   * Role to use when executing a statement. This value is case sensitive
   * @type {string}
   * @memberof StatementRequest
   */
  role?: string;
  /**
   * Database to add to search path for name resolution. This value is case sensitive
   * @type {string}
   * @memberof StatementRequest
   */
  database?: string;
  /**
   * Database schema to add to search path for name resolution. This value is case sensitive
   * @type {string}
   * @memberof StatementRequest
   */
  schema?: string;
  /**
   * Store to add to search path for name resolution. This value is case sensitive
   * @type {string}
   * @memberof StatementRequest
   */
  store?: string;
  /**
   *
   * @type {StatementRequestParameters}
   * @memberof StatementRequest
   */
  parameters?: StatementRequestParameters;
}

/**
 * Check if a given object implements the StatementRequest interface.
 */
export function instanceOfStatementRequest(value: object): boolean {
  let isInstance = true;
  isInstance = isInstance && 'statement' in value;

  return isInstance;
}

export function StatementRequestFromJSON(json: any): StatementRequest {
  return StatementRequestFromJSONTyped(json, false);
}

export function StatementRequestFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): StatementRequest {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    statement: json['statement'],
    organization: !exists(json, 'organization')
      ? undefined
      : json['organization'],
    role: !exists(json, 'role') ? undefined : json['role'],
    database: !exists(json, 'database') ? undefined : json['database'],
    schema: !exists(json, 'schema') ? undefined : json['schema'],
    store: !exists(json, 'store') ? undefined : json['store'],
    parameters: !exists(json, 'parameters')
      ? undefined
      : StatementRequestParametersFromJSON(json['parameters']),
  };
}

export function StatementRequestToJSON(value?: StatementRequest | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    statement: value.statement,
    organization: value.organization,
    role: value.role,
    database: value.database,
    schema: value.schema,
    store: value.store,
    parameters: StatementRequestParametersToJSON(value.parameters),
  };
}
